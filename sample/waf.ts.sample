#!/usr/bin/env node
import 'source-map-support/register';
const cdk = require('@aws-cdk/core');
import { WAFStack } from '@aligent/aws-waf-stack';
import { PipelineStack } from '@aligent/aws-pipeline-stack';
import { Construct } from '@aws-cdk/core';


import { Environment } from '@aws-cdk/core'
import { env } from 'node:process';

const toolsAccountEnv: Environment = {account: '<ToolsAccountId>', region: '<ToolsAccountRegion>'}; 
const preprodEnv: Environment = {account: '<TargetAccountId-Preprod>', region: '<TargetAccountRegion-Preprod>'};
const prodEnv: Environment = {account: '<TargetAccountId-Production>', region: '<TargetAccountRegion-Production>'};

const target = '<TargetAccountIdentifier>';
const appName = 'WAF';

const defaultAllowedIPs = [
    'a.a.a.a/32', 'b.b.b.b/32',     // Offices
    'c.c.c.c/32', 'd.d.d.d/32',     // Payment Gateways
]

const connectionArn = '<ArnOfToolsAccountCodeStarConnection>'
const repoOwner = '<RepositoryOwnerId>'
const RepoName = '<RepositoryName>'

const envName =  target + '-' + appName + '-preprod';
export const preProductionPipelineStackProps = {
    // BitBucket repository info start
    owner: repoOwner,
    repo: RepoName,
    branch: 'preproduction',    // Update this line as necessary
    // BitBucket repository info end
    connectionArn: connectionArn,
    env: toolsAccountEnv,
}

export const preProductionWafStackProps = {
    env: preprodEnv,
    activate: true,  // Update this line with either true or false, defining Block mode or Count-only mode, respectively.  
    allowedIPs: defaultAllowedIPs.concat([
        'y.y.y.y/32' // AWS NAT GW of preprod vpc
        // environment-specific comma-separated allow-list comes here
    ]),
    allowedUserAgents: [],  // Allowed User-Agent list that would have been blocked by AWS BadBot rule. Case-sensitive. Optional.
    excludedAwsRules: [],   // The rule to exclude (override) from AWS-managed RuleSet. Optional.
    associatedLoadBalancerArn: '<ArnOfPreproductionFrontendALB>'
}

const app = new cdk.App();
new PipelineStack(app, envName + '-pipeline', preProductionPipelineStackProps,(scope: Construct): void => {new WAFStack(scope, envName, preProductionWafStackProps)});
